version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - setup_remote_docker:

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-{{ checksum "build.gradle.kts" }}-{{ checksum "gradle.properties" }}-{{ checksum "settings.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-

      - run:
          name: Update dependencies
          command: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-{{ checksum "build.gradle.kts" }}-{{ checksum "gradle.properties" }}-{{ checksum "settings.gradle.kts" }}

      - run:
          name: Install nodeJS
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
            ./gradlew npmInstall

      - run:
          name: Run ktlint
          command: ./gradlew ktlint
      - run:
          name: Run tests
          command: ./gradlew test jacocoTestReport
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results
          destination: test-results

      - run:
          name: npm run lint
          command: ./gradlew lintFront

      - run:
          name: npm run test
          command: ./gradlew testFront

      - run:
          name: Push application Docker image
          command: |
            if [[ -z ${CIRCLE_TAG} ]]; then
              echo "No push branch: ${CIRCLE_BRANCH}"
              exit 0
            else
              echo "export IMAGE_TAG=${CIRCLE_TAG}" >> $BASH_ENV
              source $BASH_ENV
            fi
            sudo apt-get install -y python3-pip; sudo pip3 install awscli
            echo "export IMAGE_NAME=${REPOSITORY_NAME}:${IMAGE_TAG}" >> $BASH_ENV
            source $BASH_ENV

            echo "IMAGE_TAG: ${IMAGE_TAG} / IMAGE_NAME: ${IMAGE_NAME}"
            ./gradlew build
            docker build -t ${IMAGE_NAME} .
            $(aws ecr get-login --no-include-email)
            docker tag ${IMAGE_NAME} ${ECR_ENDPOINT}/${IMAGE_NAME}
            docker push ${ECR_ENDPOINT}/${IMAGE_NAME}
workflows:
  version: 2
  all:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
